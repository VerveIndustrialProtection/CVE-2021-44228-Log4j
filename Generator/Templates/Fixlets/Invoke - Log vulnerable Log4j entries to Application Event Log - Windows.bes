<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Invoke - Log vulnerable Log4j entries to Application Event Log - Windows</Title>
		<Description><![CDATA[<P>This fixlet is relevance on machines with Log4j detection results and writes the results to the Windows Event Log and requires Powershell. This is useful for tracking via a SIEM tool.</P>
$$all-copyright$$]]></Description>
		<Relevance>Windows of Operating System</Relevance>
		<Relevance>exists values "Path" of keys "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry</Relevance>
		<Relevance><![CDATA[$$all-exists-result$$]]></Relevance>
		<Category></Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2021-12-17</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Sun, 19 Dec 2021 23:43:22 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell">
parameter "OutputDir" = "{pathname of data folder of client}/__Global/Verve/Detections/Log4j/Recent"

// Check if the client has Powershell and exit if they don't 
if {not exists values "Path" of keys "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry}
	exit 101
endif

delete __createfile
delete WriteEventLog.ps1

createfile until _end_
param (
	[string] $ResultPath = (join-path $PSScriptroot "result.out")
)

Function New-WinEventLog {{
	param (
		[string[]] $ExtraData
	)
	$EventLog = "Application"
	$EventSource = "Verve Log4j Detector"
	$EventID = "4228"

	#These are just examples to pass as parameters to the event

	#Load the event source to the log if not already loaded. This will fail if the event source is already assigned to a different log.
	if ([System.Diagnostics.EventLog]::SourceExists($EventSource) -eq $false) {{
		[System.Diagnostics.EventLog]::CreateEventSource($EventSource, $EventLog)
	}

	$NewEvent = New-Object System.Diagnostics.EventLog;


	$NewEvent.Log = $EventLog;
	$NewEvent.Source = $EventSource;
	$NewEvent.WriteEvent((New-Object System.Diagnostics.EventInstance($EventID, 1)), @($ExtraData))

}

if (-not (test-path $ResultPath)) {{
	throw "No handle log provided."
}

$RawContent = (get-content -raw $ResultPath).split("`r`n")

$Content = $RawContent | Where {{ -not [string]::isnullorwhitespace($_) }

$Detections = Foreach ($Handle in $Content) {{
	$Groups = $Handle.Split(", ")

	$Version = $Groups[0]
	$Path = $Groups[-1]

	$Filename = $Path.split("\")[-1]

	write-host "$Filename - $Version - Processing"
	write-output @{{
		"Path" = $Path
		"FileName" = $Filename
		"Version" = $Version
	}
}

foreach ($Detection in $Detections) {{
	$Message = "Verve Log4j Detector found a Log4j JAR at $($Detection.Path) with version $($Detection.Version)"
	New-WinEventLog -ExtraData @($Message, $Detection.Path, $Detection.FileName, $Detection.Version)
}

write-host "Completed Processing"
_end_

move __createfile WriteEventLog.ps1

waithidden { pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry) } -ExecutionPolicy Bypass -File WriteEventLog.ps1 -ResultPath "{parameter "OutputDir"}\result.out"
continue if {exit code of action = 0}

delete __appendfile
appendfile {now}
copy __appendfile "{parameter "OutputDir"}\logged.out"</ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</DefaultAction>
	</Fixlet>
</BES>
