Set-Strictmode -version 3
$ErrorACtionPreference = "stop"

$InputDir  = (Join-Path $PSSCriptRoot "Templates\Fixlets")
$OutputDir = (Join-Path $PSSCriptRoot "Distributable")

remove-item -path $OutputDir -recurse -erroraction silentlycontinue
new-item -itemtype directory -path $OutputDir -erroraction silentlycontinue

$Components = @(Get-childitem (Join-Path $PSSCriptRoot "Components") -recurse -file)

$Templates =  @(Get-ChildItem (Join-Path $PSSCriptRoot "Templates") -recurse -file)

$UsedComponents = [System.Collections.Generic.HashSet[string]]::new()

$FindReplace = @{
	"Relevance" = @{}
	"Text" = @{}
	"Actionscript" = @{}
}

foreach ($Component in $Components) {
	$thisComponent = $Component
	$Type = $Component.Directory.name
	
	$name = $thisComponent.basename
	$value = Get-Content $thisComponent.Fullname -raw
	
	if (-not ($FindReplace.ContainsKey($Type))) { write-host "Skipping $Name for $Type"; continue; }
	
	$FindReplace[$Type].Add($Name,$Value)
	write-host "Adding $Name to FindReplace Table for $Type"
}

foreach ($Template in $Templates) {
	$TemplateName = $Template.name
	$RawTemplate = Get-Content -raw $Template
	$TemplateType = $Template.Directory.name
	
	write-host ""
	write-host "Processing $TemplateName"
	
	write-host " Processing Text Replacements"
	foreach ($FindReplaceKV in $FindReplace["Text"].GetEnumerator()) {
		$Key = $FindReplaceKV.name
		$Value = $FindReplaceKV.value
		
		$find = '$$' + $Key + '$$'
		$replace = $value
		
		if ($RawTemplate -like "*$find*") {
			write-host "  Running text replace for $find"
			[void] $UsedComponents.add($Key)
			$RawTemplate = $RawTemplate.Replace($find,$replace)
		}
	}
	
	write-host " Processing Relevance Replacements"
	foreach ($FindReplaceKV in $FindReplace["Relevance"].GetEnumerator()) {
		$Key = $FindReplaceKV.name
		$Value = $FindReplaceKV.value
		
		$find = '$$' + $Key + '$$'
		$replace = $value
		
		if ($RawTemplate -like "*$find*") {
			write-host "  Running relevance replace for $find"
			[void] $UsedComponents.add($Key)
			$RawTemplate = $RawTemplate.Replace($find,$replace)
		}
	}
	
	write-host " Processing Action Script Replacements"
	foreach ($FindReplaceKV in $FindReplace["Actionscript"].GetEnumerator()) {
		$Key = $FindReplaceKV.name
		$Value = $FindReplaceKV.value
		
		$find = '$$' + $Key + '$$'

		$replace = "// Start: $key`r`n" + $value + "`r`n// End: $key"
		
		if ($RawTemplate -like "*`t$find*") {
			write-host "  Running replace for indented $find"
			[void] $UsedComponents.add($Key)

			$RawTemplate = $RawTemplate.Replace("`t$find","`t" + $replace.replace("`r`n","`r`n`t"))
		}
		elseif ($RawTemplate -like "*$find*") {
			write-host "  Running replace for $find"
			[void] $UsedComponents.add($Key)
			$RawTemplate = $RawTemplate.Replace($find,$replace)
		}
	}
	
	if ($RawTemplate -like "*`$`$*") {
		($RawTemplate -split "`n").Where{$_ -like "*`$`$*"}.foreach{write-error "$TemplateName is missing find/replace: $_" -erroraction "continue"}
		write-error "$TemplateName has unhandled find/replace"
		
	}
	
	new-item -itemtype directory -path (Join-Path $OutputDir $TemplateType) -erroraction silentlycontinue
	
	set-content -Path (Join-Path $OutputDir $TemplateType $TemplateName) -Value $RawTemplate -force

}


foreach ($key in $FindReplace.values.keys) {
	if ($Key.ToString() -notin $UsedComponents) {
		write-warning "Unused template: $Key"
	}
}