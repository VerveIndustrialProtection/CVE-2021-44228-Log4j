<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Invoke - Log vulnerable Log4j entries to Application Event Log - Windows</Title>
		<Description><![CDATA[<P>This fixlet is relevance on machines with Log4j detection results and writes the results to the Windows Event Log and requires Powershell. This is useful for tracking via a SIEM tool.</P>
<P><STRONG>Testing</STRONG><BR>You should always test all BigFix content on a representative set of test systems before applying it to production systems. Do not apply content you have not reviewed, tested, and have a real understanding of how it will impact your systems.</P>
<P><STRONG>Copyright Verve Industrial Protection 2021</STRONG><BR>This content is produced, maintained and copyrighted by Verve Industrial Protection. You may use and distribute this content freely but you may not remove this notice. If you modify this content or derive other content from this content you must make the modified content available for free under these same terms. This content carries no Express or Implied Warranty. THE LICENSED PROPERTY IS PROVIDED "AS IS", WITH ALL FAULTS. THERE ARE NO WARRANTIES OR GUARANTEES, EXPRESS OR IMPLIED, RELATING TO THE VERVE INDUSTRIAL PROTECTION IP, THE PROPRIETARY KNOWLEDGE, OR OTHER SERVICES OR PRODUCTS TO BE PROVIDED HEREUNDER, OR ANY PROSPECTS OR OUTCOME THEREOF. VERVE INDUSTRIAL PROTECTION DISCLAIMS ANY AND ALL, AND INSTRUCTOR ACKNOWLEDGES AND AGREES THAT THERE ARE NO, REPRESENTATIONS, WARRANTIES, COVENANTS, OR CONDITIONS, WHETHER EXPRESS, IMPLIED, ARISING AT LAW, IN EQUITY, OR BY CUSTOM OF TRADE, STATUTORY OR OTHERWISE, ORAL OR WRITTEN, INCLUDING WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, TITLE OR QUIET ENJOYMENT. FURTHER, VERVE INDUSTRIAL PROTECTION DOES NOT WARRANT THAT THE LICENSED PROPERTY IS ERROR-FREE OR WILL BE AVAILABLE AT ALL TIMES OR OPERATE WITHOUT INTERRUPTION. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY VERVE INDUSTRIAL PROTECTION, ITS AGENTS, OR ITS EMPLOYEES, AT ANY TIME SHALL CREATE A WARRANTY OF ANY KIND. SOME STATES OR JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF EXPRESS OR IMPLIED WARRANTIES, SO THE ABOVE EXCLUSION MAY NOT APPLY TO YOU. IN THAT EVENT, WARRANTIES SHALL ONLY BE IMPOSED TO THE EXTENT DETERMINED BY A COURT OF COMPETENT JURISDICTION AS REQUIRED BY APPLICABLE LAW.<BR></P>]]></Description>
		<Relevance>Windows of Operating System</Relevance>
		<Relevance>exists values "Path" of keys "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry</Relevance>
		<Relevance><![CDATA[exists files "openhandles.log" whose (modification time of it > (now - (30 * minute))) of folders "/__Global/Verve/Detections/Log4j" of folders (pathname of data folder of client)]]></Relevance>
		<Category></Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2021-12-17</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Fri, 17 Dec 2021 22:56:19 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell">
// Check if the client has Powershell and exit if they don't 
if {not exists values "Path" of keys "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry}
	exit 101
endif

delete __createfile
delete WriteEventLog.ps1

createfile until _end_
param (
	[string] $HandleLogPath = (join-path $PSScriptroot "openhandles.log")
)

Function New-WinEventLog {{
	param (
		[string[]] $ExtraData
	)
	$EventLog = "Application"
	$EventSource = "Verve Log4j Detector"
	$EventID = "4228"

	#These are just examples to pass as parameters to the event

	#Load the event source to the log if not already loaded. This will fail if the event source is already assigned to a different log.
	if ([System.Diagnostics.EventLog]::SourceExists($EventSource) -eq $false) {{
		[System.Diagnostics.EventLog]::CreateEventSource($EventSource, $EventLog)
	}

	$NewEvent = New-Object System.Diagnostics.EventLog;


	$NewEvent.Log = $EventLog;
	$NewEvent.Source = $EventSource;
	$NewEvent.WriteEvent((New-Object System.Diagnostics.EventInstance($EventID, 1)), @($ExtraData))

}

if (-not (test-path $HandleLogPath)) {{
	throw "No handle log provided."
}

$RawContent = (get-content -raw $HandleLogPath).split("`r`n")

$Content = $RawContent | Where {{ -not [string]::isnullorwhitespace($_) } | Where {{$_ -notlike "*No matching handles*"} | Where {{$_ -like "*.jar*"}

$SeenPaths = New-Object System.Collections.Generic.HashSet[string]

$Detections = Foreach ($Handle in $Content) {{
	$Groups = $Handle.Split(": ")

	$Path = $Groups[-1]

	if ($SeenPaths.Contains($Path)) {{
		write-host "Skipping Duplicate: $Path"
	}
	else {{
		[void] ($SeenPaths.Add($Path))
		write-host "Processing Path: $Path"
	}

	$Filename = $Path.split("\")[-1]

	$Basename = $Filename.trim(".jar")

	$Components = $Basename.split("-")

	$Versions = @($Components.Where{{$_ -as [version] -is [version]})

	if ($Versions.count -ne 1) {{ write-error "Could not parse version: $Basename" -erroraction continue ; continue;}

	$Version = $Versions[0]

	$VersionAsString = $Version
	$VersionAsVersion = [version] $Version

	$Vulnerable = ($VersionAsVersion -ge [version] "2.0") -and ($VersionAsVersion -lt [version] "2.16")

	write-output @{{
		"Path" = $Path
		"FileName" = $Filename
		"Version" = $VersionAsString
		"Vulnerable" = $Vulnerable
	}
}

foreach ($Detection in $Detections) {{
	$Message = "Log4j JAR in Use scanner detected a Log4j JAR at $($Detection.Path) with version $($Detection.Version)"
	New-WinEventLog -ExtraData @($Message, $Detection.Path, $Detection.FileName, $Detection.Version, $Detection.Vulnerable)
}

write-host "Completed Processing"
_end_

move __createfile WriteEventLog.ps1

waithidden { pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry) } -ExecutionPolicy Bypass -File WriteEventLog.ps1 -HandleLogPath "{parameter "DataDir"}\openhandles.log"</ActionScript>
		</DefaultAction>
	</Fixlet>
</BES>
