<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Invoke - Verve Log4j Detector - Linux</Title>
		<Description><![CDATA[<P>Invokes the Verve Log4j Detector to detect if any running processes have Log4j loaded. There are two actions available, one that looks at all processes and one that just looks at Java processes.&nbsp;The Fixlets, "Warning - Verve Log4j Detector reports CVE-####-#### - Universal" will become relevant on machines with vulnerable Log4j versions shortly after this Fixlet completes.</P>
<P>To target only&nbsp;systems actively running java, target the computer group "Systems running Java Processes" that was packaged with this fixlet.</P>
<P><STRONG>Notes<BR></STRONG>In order to minimize system impact, this fixlet does not look within JAR, WAR, EAR, AAR, etc files to see if Log4j is embedded inside of them. For that functionality plan to use the Enhanced Detector.</P>
<P>This Fixlet does not take into account whether or not the JAR has been mitigated by removing the JNDI class. For that functionality plan to use the Enhanced Detector.</P>
<P><STRONG>Testing</STRONG><BR>You should always test all BigFix content on a representative set of test systems before applying it to production systems. Do not apply content you have not reviewed, tested, and have a real understanding of how it will impact your systems.</P>
<P><STRONG>Copyright Verve Industrial Protection 2021</STRONG><BR>This content is produced, maintained and copyrighted by Verve Industrial Protection. You may use and distribute this content freely but you may not remove this notice. If you modify this content or derive other content from this content you must make the modified content available for free under these same terms. This content carries no Express or Implied Warranty. THE LICENSED PROPERTY IS PROVIDED "AS IS", WITH ALL FAULTS. THERE ARE NO WARRANTIES OR GUARANTEES, EXPRESS OR IMPLIED, RELATING TO THE VERVE INDUSTRIAL PROTECTION IP, THE PROPRIETARY KNOWLEDGE, OR OTHER SERVICES OR PRODUCTS TO BE PROVIDED HEREUNDER, OR ANY PROSPECTS OR OUTCOME THEREOF. VERVE INDUSTRIAL PROTECTION DISCLAIMS ANY AND ALL, AND INSTRUCTOR ACKNOWLEDGES AND AGREES THAT THERE ARE NO, REPRESENTATIONS, WARRANTIES, COVENANTS, OR CONDITIONS, WHETHER EXPRESS, IMPLIED, ARISING AT LAW, IN EQUITY, OR BY CUSTOM OF TRADE, STATUTORY OR OTHERWISE, ORAL OR WRITTEN, INCLUDING WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, TITLE OR QUIET ENJOYMENT. FURTHER, VERVE INDUSTRIAL PROTECTION DOES NOT WARRANT THAT THE LICENSED PROPERTY IS ERROR-FREE OR WILL BE AVAILABLE AT ALL TIMES OR OPERATE WITHOUT INTERRUPTION. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY VERVE INDUSTRIAL PROTECTION, ITS AGENTS, OR ITS EMPLOYEES, AT ANY TIME SHALL CREATE A WARRANTY OF ANY KIND. SOME STATES OR JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF EXPRESS OR IMPLIED WARRANTIES, SO THE ABOVE EXCLUSION MAY NOT APPLY TO YOU. IN THAT EVENT, WARRANTIES SHALL ONLY BE IMPOSED TO THE EXTENT DETERMINED BY A COURT OF COMPETENT JURISDICTION AS REQUIRED BY APPLICABLE LAW.<BR></P>]]></Description>
		<Relevance>unix of operating system</Relevance>
		<Relevance><![CDATA[not exists modification times whose (it > (now - 30 * minute)) of files "result.out" of folders "__Global/Verve/Detections/Log4j/Recent" of data folders of client]]></Relevance>
		<Category></Category>
		<Source>Verve Industrial Protection</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2021-12-15</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Sat, 18 Dec 2021 23:26:37 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action2">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink><![CDATA[&nbsp;to inspect all processes for vulnerable Log4j components.]]></PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[// Environment Setup

parameter "OutputDir" = "{pathname of data folder of client}/__Global/Verve/Detections/Log4j/Recent"
parameter "DataDir" = "{pathname of data folder of client}/__Global/Verve/Detections/Log4j/Basic"
parameter "Query" = "grep '.jar\|.war\|.ear\|.aar'"
parameter "PIDQuery" = ""
parameter "Type" = "Basic-All-Log4j"

// Begin: Verve Log4j Detector

folder create "{parameter "DataDir"}"

delete __appendfile
appendfile {now}
move __appendfile "{parameter "DataDir"}/start.out"

delete __createfile

createfile until _end_
#!/bin/bash
# Make sure our result file exist
touch "{parameter "DataDir"}/openhandles.log"
# Find the Java processes on the system and get just their PIDs
pids=$(ps -ef | grep '{parameter "PIDQuery"}' | awk '{{print $2}')

# Iterate through all of the PIDs
IFS=$' ' readarray -t PIDS <<< "$pids"
for pid in "${{PIDS[@]}"; do
	echo "Processing: $pid"
	# We avoid a dependency on lsof by interogating the fd directly
    if [[ -d /proc/$pid/fd ]]; then
		
		# the fd is a directory with links between file descriptor ids and the file on the filesystem
		# find all file descriptors that point to a log4j jar and write them to our results
        ls -l /proc/$pid/fd | {parameter "Query"} >> "{parameter "DataDir"}/openhandles.log"
    fi
done
_end_

delete "{parameter "DataDir"}/openhandles.log"
delete run.sh
move __createfile run.sh
wait /bin/bash run.sh

// End: Verve Log4j Detector

appendfile {concatenations "%0d%0a" of unique values of (it as string) of (first matches (regex "2(\.[[:digit:]]+){1,2}}(-(alpha|beta|rc)[[:digit:]]{1,2}})?") of following text of last "/" of it, following text of first "-> " of it) of lines whose (it contains "log4j-" and it contains "core" and it contains ".jar") of file "openhandles.log" of folder (parameter "DataDir")}
move __appendfile "{parameter "DataDir"}/result.out"

appendfile {parameter "Type"}
move __appendfile "{parameter "DataDir"}/type.out"

delete __appendfile
appendfile {now}
move __appendfile "{parameter "DataDir"}/end.out"

folder delete "{parameter "OutputDir"}"
move "{parameter "DataDir"}" "{parameter "OutputDir"}"

// Issue a refresh to speed up analysis result evaluation
notify client forcerefresh]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</DefaultAction>
		<Action ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink><![CDATA[&nbsp;to inspect java processes for vulnerable Log4j components.]]></PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[// Environment Setup

parameter "OutputDir" = "{pathname of data folder of client}/__Global/Verve/Detections/Log4j/Recent"
parameter "DataDir" = "{pathname of data folder of client}/__Global/Verve/Detections/Log4j/Basic"
parameter "Query" = "grep 'log4j-core.*\.jar'"
parameter "PIDQuery" = "java\|javaw\|javac\|javadoc"
parameter "Type" = "Basic-Java-Log4j"

// Begin: Verve Log4j Detector

folder create "{parameter "DataDir"}"

delete __appendfile
appendfile {now}
move __appendfile "{parameter "DataDir"}/start.out"

delete __createfile

createfile until _end_
#!/bin/bash
# Make sure our result file exist
touch "{parameter "DataDir"}/openhandles.log"
# Find the Java processes on the system and get just their PIDs
pids=$(ps -ef | grep '{parameter "PIDQuery"}' | awk '{{print $2}')

# Iterate through all of the PIDs
IFS=$' ' readarray -t PIDS <<< "$pids"
for pid in "${{PIDS[@]}"; do
	echo "Processing: $pid"
	# We avoid a dependency on lsof by interogating the fd directly
    if [[ -d /proc/$pid/fd ]]; then
		
		# the fd is a directory with links between file descriptor ids and the file on the filesystem
		# find all file descriptors that point to a log4j jar and write them to our results
        ls -l /proc/$pid/fd | {parameter "Query"} >> "{parameter "DataDir"}/openhandles.log"
    fi
done
_end_

delete "{parameter "DataDir"}/openhandles.log"
delete run.sh
move __createfile run.sh
wait /bin/bash run.sh

// End: Verve Log4j Detector
appendfile {concatenations "%0d%0a" of unique values of (it as string) of (first matches (regex "2(\.[[:digit:]]+){1,2}}(-(alpha|beta|rc)[[:digit:]]{1,2}})?") of following text of last "/" of it, following text of first "-> " of it) of lines whose (it contains "log4j-" and it contains "core" and it contains ".jar") of file "openhandles.log" of folder (parameter "DataDir")}
move __appendfile "{parameter "DataDir"}/result.out"

appendfile {parameter "Type"}
move __appendfile "{parameter "DataDir"}/type.out"

delete __appendfile
appendfile {now}
move __appendfile "{parameter "DataDir"}/end.out"

folder delete "{parameter "OutputDir"}"
move "{parameter "DataDir"}" "{parameter "OutputDir"}"

// Issue a refresh to speed up analysis result evaluation
notify client forcerefresh]]></ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</Action>
	</Fixlet>
</BES>
