<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Invoke - Log4j Open Handle Scan - Windows</Title>
		<Description><![CDATA[<P>This invokes a scan of the open file handles of java applications to look for loaded Log4j JAR files.</P>
<P>This will only be relevant on systems with java, javac, javaw, or&nbsp;javadoc&nbsp;currently running.</P>
<P>This outputs the file in a known location so it can be read by a BigFix analysis.</P>
<P>The primary action on this fixlet produces the file to be ingested by the analysis and writes the results to the Windows Event Log and requires Powershell</P>
<P>The secondary action on this fixlet just produces the file to be ingested by the analysis.</P>
<P>Not for public distribution. Copyright Verve Industrial Protection 2021</P>]]></Description>
		<Relevance>Windows of Operating System</Relevance>
		<Relevance>exists (processes ("java.exe";"javaw.exe";"javac.exe";"javadoc.exe"))</Relevance>
		<Relevance><![CDATA[not exists files "openhandles.log" whose (modification time of it > (now - (30 * minute))) of folders "/__Global/Verve/Detections/Log4j" of folders (pathname of data folder of client)]]></Relevance>
		<Category></Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2021-12-14</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Wed, 15 Dec 2021 17:03:48 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to run the scanner.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[action uses wow64 redirection {not x64 of operating system}

prefetch handle.zip sha1:C5B70A8A8B485FA4A5F23C453CB75507480CECC2 size:908905 https://download.sysinternals.com/files/Handle.zip sha256:524E61547C8E26608CDA1B11B6E9471616CCCC48530F6E7EC9131EABF839357E
prefetch unzip.exe sha1:E1652B058195DB3F5F754B7AB430652AE04A50B8 size:167936 http://software.bigfix.com/download/redist/unzip-5.52.exe sha256:8D9B5190AACE52A1DB1AC73A65EE9999C329157C8E88F61A772433323D6B7A4A

utility __Download\unzip.exe

parameter "DataDir" = "{pathname of data folder of client}/__Global/Verve/Detections/Log4j"

// handle64.exe and handle.exe are now sitting in __Download
waithidden __Download\unzip.exe -o "__Download\handle.zip" -d "__Download"

if {x64 of operating system}
	parameter "exe" = "handle64.exe"
else 
	parameter "exe" = "handle.exe"
endif

folder create "{parameter "DataDir"}"

delete "__createfile"
delete "run.bat"

createfile until _end_
"__Download\{parameter "exe"}" -p javaw.exe log4j -accepteula -nobanner > "{parameter "DataDir"}\openhandles.temp.log"
"__Download\{parameter "exe"}" -p java.exe log4j -accepteula -nobanner >> "{parameter "DataDir"}\openhandles.temp.log"
"__Download\{parameter "exe"}" -p javadoc.exe log4j -accepteula -nobanner >> "{parameter "DataDir"}\openhandles.temp.log"
"__Download\{parameter "exe"}" -p javac.exe log4j -accepteula -nobanner >> "{parameter "DataDir"}\openhandles.temp.log"
_end_

move __createfile run.bat

delete "{parameter "DataDir"}\openhandles.temp.log"
delete "{parameter "DataDir"}\openhandles.log"

waithidden run.bat

move "{parameter "DataDir"}\openhandles.temp.log" "{parameter "DataDir"}\openhandles.log"

notify client ForceRefresh]]></ActionScript>
		</DefaultAction>
		<Action ID="Action2">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to run the scanner and write parsed results to the Windows Application Log.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[action uses wow64 redirection {not x64 of operating system}

prefetch handle.zip sha1:C5B70A8A8B485FA4A5F23C453CB75507480CECC2 size:908905 https://download.sysinternals.com/files/Handle.zip sha256:524E61547C8E26608CDA1B11B6E9471616CCCC48530F6E7EC9131EABF839357E
prefetch unzip.exe sha1:E1652B058195DB3F5F754B7AB430652AE04A50B8 size:167936 http://software.bigfix.com/download/redist/unzip-5.52.exe sha256:8D9B5190AACE52A1DB1AC73A65EE9999C329157C8E88F61A772433323D6B7A4A

utility __Download\unzip.exe

parameter "DataDir" = "{pathname of data folder of client}/__Global/Verve/Detections/Log4j"

// handle64.exe and handle.exe are now sitting in __Download
waithidden __Download\unzip.exe -o "__Download\handle.zip" -d "__Download"

if {x64 of operating system}
	parameter "exe" = "handle64.exe"
else 
	parameter "exe" = "handle.exe"
endif

folder create "{parameter "DataDir"}"

delete "__createfile"
delete "run.bat"

createfile until _end_
"__Download\{parameter "exe"}" -p javaw.exe log4j -accepteula -nobanner > "{parameter "DataDir"}\openhandles.temp.log"
"__Download\{parameter "exe"}" -p java.exe log4j -accepteula -nobanner >> "{parameter "DataDir"}\openhandles.temp.log"
"__Download\{parameter "exe"}" -p javadoc.exe log4j -accepteula -nobanner >> "{parameter "DataDir"}\openhandles.temp.log"
"__Download\{parameter "exe"}" -p javac.exe log4j -accepteula -nobanner >> "{parameter "DataDir"}\openhandles.temp.log"
_end_

move __createfile run.bat

delete "{parameter "DataDir"}\openhandles.temp.log"
delete "{parameter "DataDir"}\openhandles.log"

waithidden run.bat

move "{parameter "DataDir"}\openhandles.temp.log" "{parameter "DataDir"}\openhandles.log"

notify client ForceRefresh

delete __createfile
delete WriteEventLog.ps1

createfile until _end_
param (
	[string] $HandleLogPath = (join-path $PSScriptroot "openhandles.log")
)

Function New-WinEventLog {{
	param (
		[string[]] $ExtraData
	)
	$EventLog = "Application"
	$EventSource = "CVE-2021-44228"
	$EventID = "4228"

	#These are just examples to pass as parameters to the event

	#Load the event source to the log if not already loaded. This will fail if the event source is already assigned to a different log.
	if ([System.Diagnostics.EventLog]::SourceExists($EventSource) -eq $false) {{
		[System.Diagnostics.EventLog]::CreateEventSource($EventSource, $EventLog)
	}

	$NewEvent = New-Object System.Diagnostics.EventLog;


	$NewEvent.Log = $EventLog;
	$NewEvent.Source = $EventSource;
	$NewEvent.WriteEvent((New-Object System.Diagnostics.EventInstance($EventID, 1)), @($ExtraData))

}

if (-not (test-path $HandleLogPath)) {{
	throw "No handle log provided."
}

$RawContent = (get-content -raw $HandleLogPath).split("`r`n")

$Content = $RawContent | Where {{ -not [string]::isnullorwhitespace($_) } | Where {{$_ -notlike "*No matching handles*"} | Where {{$_ -like "*.jar*"}

$Detections = Foreach ($Handle in $Content) {{
	$Groups = $Handle.Split(": ")

	$Path = $Groups[-1]

	$Filename = $Path.split("\")[-1]

	$Basename = $Filename.split(".jar")[0]

	$Components = $Basename.split("-")

	$Versions = @($Components.Where{{$_ -as [version] -is [version]})

	if ($Versions.count -ne 1) {{ write-error "Could not parse version: $Basename" -erroraction continue ; continue;}

	$Version = $Versions[0]

	$VersionAsString = $Version
	$VersionAsVersion = [version] $Version

	$Vulnerable = ($VersionAsVersion -ge [version] "2.0") -and ($VersionAsVersion -lt [version] "2.16")

	write-output @{{
		"Path" = $Path
		"FileName" = $Filename
		"Version" = $VersionAsString
		"Vulnerable" = $Vulnerable
	}
}

foreach ($Detection in $Detections) {{
	New-WinEventLog -ExtraData @($Detection.Path, $Detection.FileName, $Detection.Version, $Detection.Vulnerable)
}

write-host "Completed Processing"
_end_

move __createfile WriteEventLog.ps1

waithidden { pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry) } -ExecutionPolicy Bypass -File WriteEventLog.ps1 -HandleLogPath "{parameter "DataDir"}\openhandles.log"]]></ActionScript>
		</Action>
	</Fixlet>
</BES>
